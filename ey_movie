#!/usr/bin/env python2

import epochtools_common as ec
import sdf

import argparse
import multiprocessing as mp
import os
from distutils import spawn

import matplotlib
matplotlib.use('Agg')  
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt
import numpy as np


def argument_parse():
  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.add_argument('--clim', dest='clim', type=float, nargs=2,
    metavar=("cmin", "cmax"), help='limits of colour axis')
  return(parser.parse_args())


def mkimage(filename):
  
  try:
    filedata = sdf.SDF(filename).read()
  except:
    print("Failed to open {0}.").format(filename)
    return
  
  try:
    x = filedata['Grid/Grid/X']
    y = filedata['Grid/Grid/Y']
    ex = filedata['Electric Field/Ey'].transpose()
  except:
    print("Failed to analyze {}.").format(filename)
    return

  ymin_loc = np.abs(y).argmin()
  lineout_ex = ex[ymin_loc]
 
  cmin = args.clim[0] if args.clim else ex.min()
  cmax = args.clim[1] if args.clim else ex.max()

  fig = plt.figure()
  ax = []
  ax.append(plt.subplot2grid((2,1), (0,0)))
  ax.append(plt.subplot2grid((2,1), (1,0)))
  
  ax[0].plot(x, lineout_ex)
  
  im = ax[1].imshow(ex, vmin=cmin, vmax=cmax,
                    extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto')
  divider = make_axes_locatable(ax[1])
  cax = divider.append_axes('right', size='5%', pad=0.05)
  plt.colorbar(im, cax=cax)
  x_px = 1920
  y_px = 1080
  y_size=10
  x_size=y_size*x_px / y_px
  plt.gcf().set_size_inches(x_size,y_size)
  savepath = os.path.join('movie',(filename[:-4]))
  print(savepath)
  plt.savefig(savepath,dpi=x_px/x_size)
  plt.close()
  return
 

def main():
  global args
  args = argument_parse()

  ec.force_mkdir('movie')

  sdf_list = [f for f in os.listdir(os.getcwd()) if f.endswith('.sdf')]
  worker_pool = mp.Pool(processes=mp.cpu_count())
  map(mkimage, sdf_list)
  worker_pool.close()
  worker_pool.join()

  ec.make_movie('movie','_ey')

 
if __name__ == '__main__':
  main()
