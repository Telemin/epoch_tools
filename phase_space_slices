#!/usr/bin/env python2

import re
import os
import sys
import shutil
from distutils import spawn
import argparse
import functools
import math

import epochtools_common as ec

import matplotlib
matplotlib.use('Agg')  
from matplotlib.colors import LogNorm, SymLogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
from matplotlib.ticker import MaxNLocator, NullLocator, FixedLocator
import matplotlib.pyplot as plt
import numpy as np
import sdf

def argument_parse():

# Set up parser and global options
  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.add_argument('fieldfile',type=str,
    metavar="fieldfile", help="field file to analyze")
  parser.add_argument('partfile',type=str,
    metavar="partfile", help="particle file to analyze")
  parser.add_argument('component',choices=['Px','Py','Pz'],
    metavar="p?", help="momentum component to analyze")
  parser.add_argument('slicesize',type=float,
    metavar="slicesize", help="size of slice in x")
  parser.add_argument('--outputprefix','-p',dest='outputPrefix',type=str,
    metavar="prefix", help="prefix to apply to output file(s)")
  parser.add_argument('--outputdir','-d',dest='outputDir',type=str,
    metavar="dir", help="directory to hold output files, defaults to NONE")
  parser.add_argument('--species',default='electron',
    help="Species for phase space")
  return(parser.parse_args())

def main():

  global args
  args = argument_parse()

  partFile = args.partfile
  fieldFile = args.fieldfile

  outputPrefix = ''
  if args.outputPrefix:
    outputPrefix = args.outputPrefix

  outputDir = ''
  if args.outputDir:
    outputDir = args.outputDir

  if not os.path.exists(os.path.join(os.getcwd(),partFile)):
    print("File {0} does not exist!".format(partFile))
    return
  if not os.path.exists(os.path.join(os.getcwd(),fieldFile)):
    print("File {0} does not exist!".format(fieldFile))
    return

  fielddata = sdf.SDF(fieldFile).read()
  gridx = fielddata['Grid/Grid/X']
  xmin,xmax = (gridx.min(),gridx.max())
  rangex = np.arange(xmin,xmax,args.slicesize)

  for xmin in rangex:
    xmax = xmin + args.slicesize
    filename = "{0}{1:.2e}-{2:.2e}.png".format(outputPrefix,xmin,xmax)
    filename = os.path.join(os.getcwd(),outputDir,filename)
    print(filename)
    plot(xmin, xmax, filename, partFile, fieldFile)
  

def plot(plotxmin,
        plotxmax,
        filename,
        partFile,
        fieldFile):

  component_expr=(''.join((args.component[0],'_',args.component[1]))).lower()
        
  try:
    partdata = sdf.SDF(partFile).read()
    partx = partdata['Grid/Particles/{0}/X'.format(args.species)][::10]
    party = partdata['Grid/Particles/{0}/Y'.format(args.species)][::10]
    px = partdata['Particles/{0}/{1}'.format(args.component,args.species)][::10]
  except:
    print("Problem analyzing {0}, file corrupted or missing data".format(partFile))
    return

  try:
    fielddata = sdf.SDF(fieldFile).read()
    dens=np.flipud(
      fielddata['Derived/Number_Density/{0}'.format(args.species)])
    gridx = fielddata['Grid/Grid/X']
    gridy = fielddata['Grid/Grid/Y']
  except:
    print("Problem analyzing {0}, "
      "file corrupted or missing data".format(fieldFile))
    return

# determine limits for imshow plot
  xmin,xmax = (gridx.min(),gridx.max())
  ymin,ymax = (gridy.min(),gridy.max())

# set limits on particles in phase space 
  rangelim1 = np.argwhere(partx<plotxmax)
  rangelim2 = np.argwhere(partx>plotxmin)
  rangelim = np.intersect1d(rangelim1,rangelim2)
  plotpartx = partx[rangelim]
  plotparty = party[rangelim]
  plotpx = px[rangelim]

# normalise momentum to mc, lengths to omega
  me = 9.10938291e-31
  c0 = 299792458
  omegal = 2 * math.pi * c0 / 800e-9 
  omega = ec.plasma_freq(0.02*ec.critical_density(omegal))
  lmda = 2 * math.pi * c0 / omega

  nplotpx = plotpx / (me * c0)
  nplotpartx = plotpartx / lmda
  nplotparty = plotparty / lmda
  nxmin = xmin / lmda
  nxmax = xmax / lmda
  nymin = ymin / lmda
  nymax = ymax / lmda
  nplotxmin = plotxmin / lmda
  nplotxmax = plotxmax / lmda
  rplotxmin = plotxmin / 1e-6
  rplotxmax = plotxmax / 1e-6

  plt.figure()
  ax = []
  ax.append(plt.subplot2grid((1,2), (0,0),))
  ax.append(plt.subplot2grid((1,2), (0,1)))
  im = []
  gc = plt.get_cmap('gnuplot')
  gy = plt.get_cmap('Greys')
  im.append(ax[0].plot(nplotparty, nplotpx, 'k.',ms=0.5))
  ax[0].set_xlabel("$y\ (\lambda_p)$")
  ax[0].set_ylabel("${0}\ (m_e / c)$".format(component_expr))
  im.append(ax[1].imshow(dens,aspect='auto',extent=[nymin,nymax,nxmin,nxmax],
    cmap=gc, vmin=5e24, vmax=5e26))
  im.append(ax[1].axhspan(nxmin,nplotxmin,color='white',alpha=0.5))
  im.append(ax[1].axhspan(nplotxmax,nxmax,color='white',alpha=0.5))
  ax[1].set_xlabel("$y\ (\lambda_p)$")
  ax[1].set_ylabel("$x\ (\lambda_p)$")
  plt.gcf().suptitle("Phase space slice from "
    "${0:.2f}\ \lambda_p$ --  ${1:.2f}\ \lambda_p$"
    "$({2:.2e}\mathrm{{\mu m}}$ --  ${3:.2e}\mathrm{{\mu m}})$"
    "".format(nplotxmin,nplotxmax,rplotxmin,rplotxmax))
  plt.gcf().set_size_inches(10,5)
  plt.savefig(filename,format='png')
  plt.close()

   
if __name__ == '__main__':
  main()
