#!/usr/bin/env python2

import epochtools_common as ec
import sdf

import argparse
import multiprocessing as mp
import os
from distutils import spawn

import numpy as np
import math as m
import scipy as sp
import scipy.constants as const
import matplotlib
matplotlib.use('Agg')  
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt

def argument_parse():
  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.add_argument('--clim', dest='clim', type=float, nargs=2,
    metavar=("cmin", "cmax"), help='limits of colour axis')
  return(parser.parse_args())


def smooth(x,beta):
 """ kaiser window smoothing """
 window_len=11
 # extending the data at beginning and at the end
 # to apply the window at the borders
 s = np.r_[x[window_len-1:0:-1],x,x[-1:-window_len:-1]]
 w = np.kaiser(window_len,beta)
 y = np.convolve(w/w.sum(),s,mode='valid')
 return y[5:len(y)-5]


def extract_zero_point(filename):
  
  try:
    filedata = sdf.SDF(filename).read()
  except:
    print("Failed to open {0}.").format(filename)
    return
  
  try:
    x = filedata['Grid/Grid/X']
    y = filedata['Grid/Grid/Y']
    ex = filedata['Electric Field/Ex'].transpose()
  except:
    print("Failed to analyze {}.").format(filename)
    return

  ymin_loc = np.abs(y).argmin()
  lineout_ex = ex[ymin_loc]
  slineout_ex = smooth(lineout_ex,16)

  time = filedata['Header']['time']
  exargmin = np.argmin(slineout_ex)
  exargmax = np.argmax(slineout_ex[0:exargmin+1])
  exarg0 = np.argmin(np.abs(slineout_ex[exargmax:exargmin+1]))
  x0 = x[exargmax:exargmin+1][exarg0]

  print("Zero in {0} at idx {1}: {2}".format(filename, exarg0, x0))
 
  return((x0, time))
 

def extract_min_point(filename):
  
  try:
    filedata = sdf.SDF(filename).read()
  except:
    print("Failed to open {0}.").format(filename)
    return
  
  try:
    x = filedata['Grid/Grid/X']
    y = filedata['Grid/Grid/Y']
    ex = filedata['Electric Field/Ex'].transpose()
  except:
    print("Failed to analyze {}.").format(filename)
    return

  ymin_loc = np.abs(y).argmin()
  lineout_ex = ex[ymin_loc]
  slineout_ex = smooth(lineout_ex,16)

  time = filedata['Header']['time']
  exargm = np.argmin(slineout_ex)
  xm = x[exargm]

  print("Zero in {0} at idx {1}: {2}".format(filename, exargm, xm))
 
  return((xm, time))
 

def main():
  global args
  args = argument_parse()

  sdf_list = [f for f in os.listdir(os.getcwd()) if f.endswith('.sdf')]
  worker_pool = mp.Pool(processes=mp.cpu_count()/4)
  zeropoints = map(extract_min_point, sdf_list)
  worker_pool.close()
  worker_pool.join()

  for i in range(0,len(zeropoints)-2):
    tstep = zeropoints[i][1] - zeropoints[i-1][1]
    xstep = zeropoints[i][0] - zeropoints[i-1][0]
    vstep = xstep / tstep
    try:
      gammastep = 1 / m.sqrt(1- m.pow(vstep/const.c, 2))
    except:
      gammastep = "invalid"

    print("Est vel at step {0}: {1} m/s, gamma - {2}".format(i, vstep, gammastep))

#  ec.make_movie('movie','_ex')

 
if __name__ == '__main__':
  main()
