#!/usr/bin/env python2
# vim: set fileencoding=UTF-8

import sys

import sdf
import epochtools_common as ec

import argparse

import numpy as np
import scipy.fftpack as fft

import matplotlib
matplotlib.use('tkagg')
import matplotlib.pyplot as plt
import matplotlib.patches as mplpat
import matplotlib.gridspec as mplgs
from matplotlib.colors import LogNorm, SymLogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable

def argument_parse():
    parser = argparse.ArgumentParser(description='Find Electron Bunches')
    parser.add_argument('-s','--species',dest='species',default='electron',
        help='Species name')
    parser.add_argument('sdf_file', metavar='SDF', help='SDF file containing'
     'density data')
    parser.add_argument('--clim', dest='limits', type=float, nargs=2,
     metavar=("cmin", "cmax"), default=(1e24,1e27), help='limits of colour axis')
    parser.add_argument('--dens-cutoff', dest='dens_cutoff', type=float, 
     default=1e25, metavar='X', help='Ignore cells with density less than X')

    return(parser.parse_args())


def update_ellipse(ax, ellid,  memo={}):
    centre = input("ROI x centre (um): ")*1e-6
    semi_x = input("ROI x semi-axis (um): ")*1e-6
    semi_y = input("ROI y semi-axis (um): ")*1e-6
    
    try:
        memo[ellid].center = (centre,0)
        memo[ellid].width = 2*semi_x
        memo[ellid].height = 2*semi_y
    except KeyError:
        ell = mplpat.Ellipse((centre,0),2*semi_x,2*semi_y, alpha = 0.5)
        ax[0].add_patch(ell)
        memo[ellid] = ell

    ax[0].get_figure().canvas.draw()

    if raw_input("Are we done here? (Y/N) ") == "n":
        centre,semi_x,semi_y = update_ellipse(ax, ellid)
    return(centre,semi_x,semi_y)


def main():
    
    global args #yeah, yeah I'm a bad person and should use a namespace...
    args = argument_parse() 
    
    try:
        sdf_data = ec.read_sdf(args.sdf_file) 
    except Exception as err:
        print("Failed to load {}:".format(args.sdf_file))
        print(err)
        sys.exit(-1)

    try:
        gridx = sdf_data.Grid_Grid_mid.data[0]
        gridy = sdf_data.Grid_Grid_mid.data[1]
        dens = getattr(sdf_data, 
         'Derived_Number_Density_{0}'.format(args.species)).data.transpose()
    except Exception as err:
        print("Failed to read data:")
        print(Exception)
    
    safeMin = dens.min() if dens.min() > 1e10 else 1e10
    cmin = args.limits[0] if args.limits else safeMin
    cmax = args.limits[1] if args.limits else dens.max()

    fig = plt.figure()
    ax = []
    im = []

    ax.append(fig.add_subplot(1,1,1))
    im.append(ax[0].imshow(dens, vmin=cmin, vmax=cmax,
        norm=LogNorm(), cmap=plt.get_cmap('CMRmap'), aspect='auto', 
        extent=[gridx.min(), gridx.max(), gridy.min(), gridy.max()]))
    divider = make_axes_locatable(ax[0])
    cax = divider.append_axes('right', size='5%', pad=0.05)
    cbar = plt.colorbar(im[0], cax=cax)
    ax[0].set_title("$time\ t={0}\mathrm{{s}}$".format(sdf_data.Header['time']))
    ax[0].set_xlabel("$x\  \mathrm{m}$")
    ax[0].set_ylabel("$y\  \mathrm{m}$")
    cbar.set_label("$n_e\  \mathrm{m^{-3}}$", rotation=270)
    fig.show()

    centre, semi_x, semi_y = update_ellipse(ax, "jeff")

    plt.close(fig)

    elXMin = centre - semi_x
    elXMax = centre + semi_x
    elYMin = -semi_y
    elYMax = semi_y

    mgridx,mgridy = np.meshgrid(gridx,gridy)

    xargmin = np.argmin(np.abs(gridx - (centre - semi_x)))+1
    xargmax = np.argmin(np.abs(gridx - (centre + semi_x)))
    yargmin = np.argmin(np.abs(gridy - (0 - semi_y)))+1
    yargmax = np.argmin(np.abs(gridy - (0 + semi_y)))

    x_trim = gridx[xargmin:xargmax]
    y_trim = gridy[yargmin:yargmax]
    mgridx, mgridy, dens_trim = [a[yargmin:yargmax,xargmin:xargmax] for a in [mgridx,mgridy,dens]] 

    dens_trim = np.where(((mgridx - centre)**2 / semi_x**2) 
     + ((mgridy - 0)**2 / semi_y**2) <=1,dens_trim, 0 )

    dens_trim = np.where(dens_trim >= args.dens_cutoff, dens_trim, 0)

    weighting = np.sum(np.where(dens_trim > 0, 1, 0),axis=0)
    weighting = np.where(weighting == 0, 1, weighting)
    dens_lineout = np.sum(dens_trim, axis=0)/weighting

    dens_fft = np.power(fft.rfft(dens_lineout),2)
    dens_fftfreq = fft.rfftfreq(dens_fft.size,x_trim[2]-x_trim[1])

    dens_fft[0] = 0

    signal_cutoff = 0.2 * np.max(dens_fft)

    print("Frequency peaks at: {}"
     "m^-1".format(dens_fftfreq[np.argwhere(dens_fft > signal_cutoff)]))
    print("Corresponding to: {} "
     "m".format(1/dens_fftfreq[np.argwhere(dens_fft > signal_cutoff)]))

    fig2 = plt.figure()
    gs = mplgs.GridSpec(3,1)
    ax2 = []
    im2 = []
    ax2.append(fig2.add_subplot(gs[0]))
    ax2.append(fig2.add_subplot(gs[1]))
    ax2.append(fig2.add_subplot(gs[2]))
    im2.append(ax2[0].imshow(dens_trim, vmin=cmin, vmax=cmax,
        norm=LogNorm(), cmap=plt.get_cmap('CMRmap'), aspect='auto', 
        extent=[mgridx.min(), mgridx.max(), mgridy.min(), mgridy.max()]))
    im2.append(ax2[1].plot(x_trim,dens_lineout))
    im2.append(ax2[2].plot(dens_fftfreq,dens_fft))
    [a.set_xlim(mgridx.min(), mgridx.max()) for a in ax2[:-1]]
    fig2.show()
    raw_input()

# clip density data to just ROI

# Sum across the domain

# look for peaks in the total number of electrons

# plot results and save


if __name__ == "__main__":
    main()
