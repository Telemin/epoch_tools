#!/usr/bin/env python2
# vim: set fileencoding=UTF-8

import epochtools_common as ec
import sdf
import pickle

import signal
import argparse
import multiprocessing as mp
import os
from distutils import spawn

import numpy as np
import math

import scipy as sp
import scipy.optimize as so
import scipy.constants as const
import scipy.interpolate as si

import matplotlib
matplotlib.use('Agg')  
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt

def init_worker():
  signal.signal(signal.SIGINT, signal.SIG_IGN)


def gaussian_smooth_extended(data,degree=5):  

  data = np.array(data)
  window=degree*2-1  
  weight=np.array([1.0]*window)  
  weightGauss=[]
  data = np.append(data, np.array([data[-1]]*(degree-1)))
  data = np.append(np.array([data[0]]*(degree-1)), data)

  for i in range(window):  

    i=i-degree+1  

    frac=i/float(window)  

    gauss=1/(np.exp((4*(frac))**2))  

    weightGauss.append(gauss)  

  weight=np.array(weightGauss)*weight  

  smoothed=[0.0]*(len(data)-window+1)  

  for i in range(len(smoothed)):  

    smoothed[i]=sum(np.array(data[i:i+window])*weight)/sum(weight)  

  return np.array(smoothed)


def local_argmax(iterable, start, window):
  if type(start) != int:
    raise TypeError("start must be of type int")
  if type(window) != int:
    raise TypeError("window must be of type int")

  if start < 0:
    start += len(iterable)

  ## TODO finish me  


def argument_parse():
  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.set_defaults(outputdir='vg_tracking')
  parser.add_argument('gamma', type=float)
  parser.add_argument('ripple', type=float)
  parser.add_argument('--ires', dest="ires", type=int, nargs=2)
  parser.add_argument('--drop-first','-d', dest="dropFirst", type=int)
  parser.add_argument('--drop-last','-D', dest="dropLast", type=int)
  parser.add_argument('--fit-first','-f', dest="fitFirst", type=int)
  parser.add_argument('--fit-last','-F', dest="fitLast", type=int)
  parser.add_argument('--clim', dest='clim', type=float, nargs=2,
    metavar=("cmin", "cmax"), help='limits of colour axis')
  parser.add_argument('--nprocs', '-n', type=int, dest='procs', default=1)
  return(parser.parse_args())


def smooth(x,beta):
 """ kaiser window smoothing """
 window_len=11
 # extending the data at beginning and at the end
 # to apply the window at the borders
 s = np.r_[x[window_len-1:0:-1],x,x[-1:-window_len:-1]]
 w = np.kaiser(window_len,beta)
 y = np.convolve(w/w.sum(),s,mode='valid')
 return y[5:len(y)-5]


def find_zero_crossing(data, start=0, stop=-1):
#  if type(direction) != int:
#    raise TypeError("Error: direction: expected int, not {0}".format(type(direction)))
#  if type(start) != int:
#    raise TypeError("Error: start: expected int, not {0}".format(type(start)))
  
  direction = -1 if ( start > stop and stop > -1) else 1

  for i in range(start, stop, direction):
    if (data[i] * data[i+1]) < 0:
      return(i)

  return(-1)

def interpolate_crossing(a, b):
  m = (b[1] - a[1]) / (b[0] - a[0])
  c = a[1] - (a[0] * m)
  print("\t interpolation debug:")
  print("\t a: {0} \n \t b: {1}".format(a,b))
  print("\t m: {0}".format(m))
  if m != 0:
    zero = - (c/m)
  else:
    zero = a[0]
  print("\t zero: {0}".format(zero))
  return(zero)

def find_first_minimum(data,sliceSize=50,stepSize=50,largestMinimum=-1e10):
  bestSliceMin = 0
  bestSliceMinArg = -1
  for i in range(len(data)-(sliceSize),0+(sliceSize),-stepSize):
    lappedslice = data[i-sliceSize:i+sliceSize]
    sliceMinArg = i - sliceSize + np.argmin(lappedslice)
    sliceMin = data[sliceMinArg]
    if ( bestSliceMin < largestMinimum) and ( bestSliceMin < sliceMin ):
      break
    elif (sliceMin < bestSliceMin):
      bestSliceMinArg = sliceMinArg
      bestSliceMin = sliceMin
    else:
      continue
  return(bestSliceMinArg)

def midpoints(x):
    return((x[:-1] + x[1:])/2)


def extract_zero_point(filename):
 
  FileInUse = ec.check_file_in_use(filename)
  if FileInUse:
    print("{0} in use by PID {1}, skipping".format(filename,FileInUse))
    return
  elif os.path.exists(os.path.join(os.getcwd(),args.outputdir,''.join((filename[:-4],'.png')))):
    print("{0} already analyzed, skipping".format(filename))
    return
  else:
    print("Analyzing {0}".format(filename))

 
  try:
    filedata = sdf.read(filename)
    x = midpoints(filedata.Grid_Grid.data[0])
    print(x.shape)
    y = midpoints(filedata.Grid_Grid.data[1])
    print(y.shape)
    ex = filedata.Electric_Field_Ex.data.transpose()
    print(ex.shape)
    dens = filedata.Derived_Number_Density.data.transpose()
  except Exception as err:
    print(err)
    print("Problem analyzing {0}, file corrupted or missing data".format(filename))
    return

  ymin_loc = np.abs(y).argmin()
  lineout_ex = ex[ymin_loc]
  slineout_ex = lineout_ex
  time = filedata.Header['time']
  exargmin = find_first_minimum(lineout_ex)
  exarg0 = find_zero_crossing(lineout_ex, exargmin, 0)
  print("crossing x:",x[exarg0], x[exarg0+1])
  print("crossing ex:",lineout_ex[exarg0], lineout_ex[exarg0+1])
  ex0 = lineout_ex[exarg0]
  #x0 = x[exarg0]
  x0 = interpolate_crossing((x[exarg0],lineout_ex[exarg0]),(x[exarg0+1],lineout_ex[exarg0+1]))
  y0 = y[ymin_loc]

  print("Zero in {0} at idx {1}: ({2},{3})".format(filename, exarg0, x0,y0))
 
  cmin = args.limits[0] if args.clim else dens.min()
  cmax = args.limits[1] if args.clim else dens.max()

  plt.figure()
  ax = []
  ax.append(plt.subplot2grid((1,1), (0,0)))
  im = []
#  im.append(ax[0].imshow(dens[::10,::10], vmin=cmin, vmax=cmax, norm=LogNorm(),
#            extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto'))
  im.append(ax[0].plot(x,slineout_ex))
  im.append(ax[0].plot(x0,0,'k.',markersize=9))
  im.append(ax[0].plot(x[exarg0],lineout_ex[exarg0],'k+',markersize=9))
  im.append(ax[0].plot(x[exargmin],lineout_ex[exargmin],'r+',markersize=9))
  
  axLim = [abs(slineout_ex.min()) if abs(slineout_ex.min()) > abs(lineout_ex.max()) else abs(slineout_ex.max())]
  ax[0].set_xlim(x[0],x[-1])
  ax[0].set_ylim(-axLim[0],axLim[0])

#  divider = make_axes_locatable(ax[0])
#  cax = divider.append_axes('right', size='5%', pad=0.05)
#  plt.colorbar(im[0], cax=cax)
  x_px = args.ires[0] if args.ires else 1440
  y_px = args.ires[1] if args.ires else 900
  y_size=10
  x_size=y_size*x_px / y_px
  plt.gcf().set_size_inches(x_size,y_size)
  savepath = os.path.join(args.outputdir,(filename[:-4]))
  plt.savefig(savepath,dpi=x_px/x_size)
  plt.close()


  return((x0, time))

def cos_fit(x,y):
  guessMean = 1
  guessAmp = 0.2
  guessPhase = 0
  guessK = 2*np.pi / args.ripple

  print("Fitting first guess: {0} + {1}*sin({3}*x + {2})".format(guessMean,
    guessAmp, guessPhase, guessK))

  def optimizationFunction(x, a, b, c, k):
    return(a + b*np.sin(x*k + c))

  pOpt, pCov= so.curve_fit(optimizationFunction, x, y,
    [guessMean, guessAmp, guessPhase, guessK])

  fitMean, fitAmp, fitPhase, fitK = pOpt
  pErr = np.sqrt(np.diag(pCov))

  print("Fitting optimized fit: {0} + {1}*sin({3}*x + {2})".format(fitMean,
    fitAmp, fitPhase, fitK))

  return(pOpt, pErr)


def main():
  global args
  args = argument_parse()

  print("Re-analyzing all files...\n")
  ec.force_mkdir(args.outputdir) 
 

  sdf_list = [f for f in os.listdir(os.getcwd()) if f.endswith('.sdf')]

  workerPool = mp.Pool(args.procs, init_worker)

  try:
#    zeropoints = workerPool.map_async(extract_zero_point, sdf_list).get(999999)
    zeropoints = map(extract_zero_point, sdf_list)
    workerPool.close()
    workerPool.join()

  except KeyboardInterrupt:
    print("Caught keyboard interrupt, terminating...")
    workerPool.terminate()
    workerpool.join()

  zeropoints = list(filter(None, zeropoints))

  zeropoints.sort(key=lambda tup: tup[1])
  
  with open('zeropoints.pickle' ,'wb') as f:
    pickle.dump(zeropoints, f)

  if args.dropFirst:
    zeropoints = zeropoints[args.dropFirst:-1]  
  if args.dropLast:
    zeropoints = zeropoints[0:-args.dropLast]  

  x, t = zip(*zeropoints)
  x = np.asarray(x)
  t = np.asarray(t)
  dxdt = np.gradient(x, t[1]-t[0])
  beta = dxdt / 3e8
 
  np.savetxt("beta_x.txt", np.transpose(np.asarray([x,beta])), delimiter=" ")

  fitK = 2*np.pi / args.ripple
  fitX = x
  fitBeta = beta
 
  if args.fitFirst:
    dif = (args.fitFirst - args.dropFirst) if args.dropFirst else args.fitFirst
    print(dif)
    fitX = fitX[dif:-1]  
    fitBeta = fitBeta[dif:-1]  
  if args.fitLast:
    dif = (args.fitLast - args.dropLast) if args.dropLast else args.fitLast
    print(dif)
    fitX = fitX[0:-dif]  
    fitBeta = fitBeta[0:-dif]  

  print("Fitting using {} points".format(len(fitX)))

  betaCoeffs, betaErrs = cos_fit(fitX,fitBeta)

  xFit = betaCoeffs[0] + betaCoeffs[1]*np.sin(fitX*betaCoeffs[3] + betaCoeffs[2])

  plotX = x / 1e-6
  plotFitX = fitX / 1e-6


  gamma = np.power(beta, 2)
  gamma = 1.-gamma
  gamma = np.power(np.sqrt(gamma),-1)

  kostgamma = args.gamma
  kostbeta = math.sqrt(1 - math.pow(kostgamma,-2))
  print("beta = {0}".format(kostbeta))

  try:
    avgGamma = math.sqrt(1/(1 - math.pow(betaCoeffs[0],2)))
    avgGammaLow = abs(math.sqrt(1/(1 - math.pow(betaCoeffs[0]-betaErrs[0],2))) - avgGamma)
    avgGammaHigh = math.sqrt(1/(1 - math.pow(betaCoeffs[0]+betaErrs[0],2))) - avgGamma
  except:
    avgGamma = 1
    avgGammaLow = 1
    avgGammaHigh = 1

  plt.figure()
  ax = []
  ax.append(plt.subplot2grid((1,1), (0,0)))
  im = []
  im.append(ax[0].plot(t, beta))
  im.append(ax[0].axhline(kostbeta))
  ax[0].set_ylim(0,3)
  ax[0].set_xlabel(r'$t (s)$')
  ax[0].set_ylabel(r'$\beta_{ph}$')
  savepath = 'beta_t'
  plt.savefig(savepath)
  plt.close()

  plt.figure()
  ax = []
  ax.append(plt.subplot2grid((1,1), (0,0)))
  im = []
  im.append(ax[0].plot(plotX, beta, 'k.'))
  im.append(ax[0].plot(plotFitX, xFit))
  im.append(ax[0].axhline(kostbeta))
  ax[0].set_ylim(0,3)
  ax[0].text(40,1.6, r'$<\beta_{{ph}}>={0:.3f}+{1:.3f}$'.format(betaCoeffs[0],betaErrs[0]),
    fontsize=15)
  ax[0].text(40,1.4, r'$<\gamma_{{ph}}>={0:.3f}^{{+{1:.3f} }}_{{ -{2:.3f} }}$'
  r''.format(avgGamma,avgGammaHigh, avgGammaLow), fontsize=15)
#  ax[0].text(40,2.5, r'$\beta = {1:.3f}*\sin(\frac{{2 \pi x}}{{ {3:.3f} }} + '
#  r'{2:.3f}) + {0:.3f}$'.format(betaCoeffs[0], betaCoeffs[1], betaCoeffs[2],
#  (2*np.pi*1e6)/betaCoeffs[3]))
  ax[0].set_xlabel(r'$x \mathrm{(\mu m)}$')
  ax[0].set_ylabel(r'$\beta$')
  savepath = 'beta_x'
  plt.savefig(savepath)
  plt.close()

  plt.figure()
  ax = []
  ax.append(plt.subplot2grid((1,1), (0,0)))
  im = []
  im.append(ax[0].plot(x, gamma))
  im.append(ax[0].axhline(1))
  im.append(ax[0].axhline(kostgamma))
  ax[0].set_ylim(0,10)
  savepath = 'gamma_x'
  plt.savefig(savepath)
  plt.close()


if __name__ == '__main__':
  main()
