#!/usr/bin/env python
# vim: set fileencoding=UTF-8

import multiprocessing as mp
import os
import sys
import shutil
from distutils import spawn
import argparse

import epochtools_common as ec

import matplotlib
matplotlib.use('Agg')  
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt
import numpy as np
import sdf

def argument_parse():

# Set up parser and global options
  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.add_argument('zvar', type=str, nargs=1, metavar='ZVAR',
    help='Z variable to plot, as named in SDF file')
  parser.add_argument('--freshen','-f', dest='freshen', action='store_true')
  parser.add_argument('--outputdir','-o', dest='outputdir', type=str, nargs=1,
    default="movie")
  parser.add_argument('--ires', '-i', dest='ires', type=int, nargs=2,
    metavar=("x(px)", "y(px)"), help='Output image dimensions (px)')
  parser.add_argument('--climits', '-c', dest='cLimits', type=float, nargs=2)
  parser.add_argument('--numprocs','-n', dest='procs', type=int, default=1,
    help="Number of analysis threads to use")

  return(parser.parse_args())


def make_image(filename):

  FileInUse = ec.check_file_in_use(filename)
  if FileInUse:
    print("{0} in use by PID {1}, skipping".format(filename,FileInUse))
    return
  elif os.path.exists(os.path.join(os.getcwd(),args.outputdir,''.join((filename[:-4],'.png')))):
    print("{0} already analyzed, skipping".format(filename))
    return
  else:
    print("Analyzing {0}".format(filename))

  try:
    filedata = sdf.SDF(filename).read()
    x = filedata['Grid/Grid/X']
    y = filedata['Grid/Grid/Y']
    dens = np.rot90(filedata[args.zvar[0]])
  except KeyError:
    print('entry {0} not found in SDF'.format(args.zvar))
    return
  except Exception as err:
    print("Problem analyzing {0}, file corrupted or missing data".format(filename))
    print(err)
    return


  cmin = args.cLimits[0] if args.cLimits else dens.min()
  cmax = args.cLimits[1] if args.cLimits else dens.max()
  print(args.cLimits)
  print(cmin,cmax)
  plt.figure()
  ax = []
  ax.append(plt.subplot2grid((1,1), (0,0)))
	
  im = []
  im.append(ax[0].imshow(dens, vmin=cmin, vmax=cmax,
            extent=[x.min(), x.max(), y.min(), y.max()], aspect='auto'))

  divider = make_axes_locatable(ax[0])
  cax = divider.append_axes('right', size='5%', pad=0.05)
  plt.colorbar(im[0], cax=cax)
  x_px = args.ires[0] if args.ires else 1920
  y_px = args.ires[1] if args.ires else 1080
  y_size=10
  x_size=y_size*x_px / y_px
  plt.gcf().set_size_inches(x_size,y_size)
  savepath = os.path.join(args.outputdir,(filename[:-4]))
  plt.savefig(savepath,dpi=x_px/x_size)
  plt.close()

def main():

  global args
  args = argument_parse()

  if args.freshen == True:
    print("Re-analyzing all files...\n")
    ec.force_mkdir(args.outputdir) 
  else:
    print("Analyzing new files...\n")
    ec.mkdir(args.outputdir)
  
  sdf_list = [f for f in os.listdir(os.getcwd()) if f.endswith('.sdf')]
  worker_pool = mp.Pool(processes=args.procs)
  worker_pool.map(make_image, sdf_list)
  if spawn.find_executable('avconv'):
    converter = spawn.find_executable('avconv')
  elif spawn.find_executable('ffmpeg'):
    converter = spawn.find_executable('ffmpeg')
  else:
    print("Couldn't find ffmpeg/avconv :(\n"
          "you're on your own for making the movie")
    sys.exit(1)

  conv_args = [converter,'-r', '1', '-i', '{0}/%04d.png'.format(args.outputdir), 
              '-c:v', 'libx264', '-r', '30', '-pix_fmt', 'yuv420p','-y', 
              ''.join((os.path.basename(os.getcwd()),'.mp4'))]
  spawn.spawn(conv_args)
  
if __name__ == '__main__':
  main()
