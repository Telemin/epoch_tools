#!/usr/bin/env python
# vim: set fileencoding=UTF-8

import matplotlib
matplotlib.use('Agg')  
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt
import numpy as np
import scipy.signal as sps
import sdf
import multiprocessing as mp
import os
import re
import argparse
import shutil
from distutils import spawn

def main():

  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.add_argument('--exclude','-e',dest='exclude',action='append',
    metavar="patt", help="exclude filenames matching regex 'patt', " 
    "may be used more than once")

  global args
  args = parser.parse_args()

  try:
    shutil.rmtree('movie')
  except:
    pass
  try:
    os.mkdir('movie')
  except:
    print('Problem creating movie directory, check perms?')
    exit()
  sdfList = [f for f in os.listdir(os.getcwd()) if f.endswith('.sdf')]
  if args.exclude:
    for pattern in args.exclude:
      try:
        eP = re.compile(pattern)
      except:
        print("Skipping invalid regex pattern {0}".format(pattern))
        continue
      for sdfFile in sdfList:
        if eP.search(sdfFile):
          sdfList.remove(sdfFile)
#  worker_pool = mp.Pool(processes=mp.cpu_count())
#  worker_pool.map(mkimage, sdfList)
  f = list(map(mkimage, sdfList))
  if spawn.find_executable('avconv'):
    converter = spawn.find_executable('avconv')
  elif spawn.find_executable('ffmpeg'):
    converter = spawn.find_executable('ffmpeg')
  else:
    print("Couldn't find ffmpeg/avconv :(\n"
          "you're on your own for making the movie)")
    os.exit(1)

  conv_args = [converter,'-r', '1', '-i', 'movie/%04d.png', '-c:v', 'libx264',
              '-r', '30', '-pix_fmt', 'yuv420p','-y', 
              ''.join((os.path.basename(os.getcwd()),'.mp4'))]
  spawn.spawn(conv_args)

def mkimage(filename):

  filedata = sdf.SDF(filename).read()
  x = filedata['Grid/Grid/X']
  y = filedata['Grid/Grid/Y']
  dens = np.rot90(filedata['Derived/Number_Density/electron'])
  ex = filedata['Electric Field/Ex']
#  dens = sps.wiener(densun)


  fig = plt.figure()
  ax = []
  ax.append(plt.subplot2grid((2,1), (0,0)))
  ax.append(plt.subplot2grid((2,1), (1,0)))


  #ax[0].semilogy(x,dens)
  ax[0].imshow(dens,extent=[x.min(),x.max(),y.min(),y.max()],aspect='auto')
  ax[1].plot(x,ex[:,int(ex.shape[1]/2)])
  #ax[0].set_ylim([3e24,3e26])
  ax[1].set_xlim([x.min(),x.max()])
  x_px = 1920
  y_px = 1080
  y_size=10
  x_size=y_size*x_px / y_px
  plt.gcf().set_size_inches(x_size,y_size)
  savepath = os.path.join('movie',(filename[:-4]))
  print(savepath)
  plt.savefig(savepath,dpi=x_px/x_size)
  plt.close()
  
if __name__ == '__main__':
  main()
