#!/usr/bin/env python
# vim: set fileencoding=UTF-8

import argparse

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import sdf
import numpy as np

"""
Routines to produce output blocks for epoch with tracking of specific particles
"""

def argument_parse():
  parser = argparse.ArgumentParser(description='Find density FFT')
  parser.add_argument('sdffile', metavar='NNNN', type=int, nargs=1,
                   help='SDF file to be processed')
  return(parser.parse_args())


def collect_data(filename):
  sdf_data = sdf.SDF(filename).read()
  particle_data = np.vstack((
    sdf_data['Grid/Particles/electron/X'],
    sdf_data['Grid/Particles/electron/Y'],
    sdf_data['Particles/Px/electron'],
    sdf_data['Particles/ID/electron'].astype(np.int64)))
  particle_data = particle_data[:,particle_data[2].argsort()]
  return particle_data
    

def main():
  args = argument_parse()
  data_file = '{0:04d}.sdf'.format(args.sdffile[0])
  print(data_file)
  particle_data = collect_data(data_file)
  selected_particles = particle_data[:,-15:]
  
  filedata = sdf.SDF(data_file).read()
  x = filedata['Grid/Grid/X']
  y = filedata['Grid/Grid/Y']
  dens = filedata['Derived/Number_Density/electron'].transpose()
  plt.figure()
  ax = plt.gca()
  im = ax.imshow(dens, vmin=1e24, vmax=1e26, extent=[x.min(), x.max(), y.min(), y.max()])
  plt.scatter(selected_particles[0],selected_particles[1],color='k')
  plt.savefig('selected_particles')

  for particle in selected_particles[3].astype(np.int64):
    print("begin:subset")
    print("name = sub{0}".format(particle))
    print("id_min = {0}".format(particle))
    print("id_max = {0}".format(particle))
    print("include_species:electron")
    print("end:subset")
    print("")
   
  subsets = " + ".join([ "sub{0}".format(a) for a in selected_particles[3].astype(np.int64)])

  print("begin:output")
  print("")
  print("dt_snapshot = output_timestep")
  print("force_first_to_be_restartable = T")
  print("full_dump_every = output_full_freq")
  print("restart_dump_every = output_restart_freq")
  print("")
  print("particles = restart + {0}".format(subsets))
  print("px = restart + {0}".format(subsets))
  print("py = restart + {0}".format(subsets))
  print("pz = restart + {0}".format(subsets))
  print("vx = restart")
  print("vy = restart")
  print("vz = restart")
  print("id = restart + {0}".format(subsets))
  print("charge = restart")
  print("mass = restart")
  print("particle_weight = restart")
  print("")

  print("grid = always")
  print("ex = always")
  print("ey = always")
  print("ez = always")
  print("bx = always")
  print("by = always")
  print("bz = always")
  print("jx = always")
  print("jy = always")
  print("ekbar = always + species")
  print("mass_density = restart")
  print("charge_density = always + species")
  print("number_density = always + species")
  print("temperature = always + species")
  print("")
  print("distribution_functions = restart")
  print("particle_probes = never")
  print("end:output")
  

if __name__ == "__main__":
  main()
