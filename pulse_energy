#!/usr/bin/env python2

import sdf
import re
import os
import shutil
import numpy as np
import multiprocessing as mp
from multiprocessing import Manager
from distutils import spawn

import matplotlib
matplotlib.use('Agg')  
from matplotlib import pylab
from matplotlib.colors import LogNorm
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib.pyplot as plt

match_subset = re.compile("Particles/ID/subset_(?P<subset>.*)/electron")

manager = Manager()
shared_data = manager.list()

def main():
  global shared_data
  try:
    os.mkdir('movie')
  except:
    print('movie directory already exists, will not overwrite')
    exit()
  sdf_list = [f for f in os.listdir(os.getcwd()) if f.endswith('.sdf')]
  worker_pool = mp.Pool(processes=mp.cpu_count())
  pulse_energy = worker_pool.map(process_file, sdf_list)
  pulse_energy = np.vstack(pulse_energy)
  pulse_energy = pulse_energy[np.argsort(pulse_energy[:,0])]
  pulse_energy = np.multiply(pulse_energy, (1/pulse_energy.max()))
  fig = plt.figure(0)
  ax = []
  ax.append(plt.subplot2grid((1,1), (0,0)))
  ax[0].plot(pulse_energy[:,0],pulse_energy[:,1])
  ax[0].set_ylabel('$t (s)$')
  ax[0].set_xlabel('$W/W_{max}$')
  plt.savefig("pulse_energy")
  plt.close()

def process_file(filename):
  sdf_data = sdf.SDF(filename).read()
  return (sdf_data['Header']['time'], integrate_pulse(sdf_data))

def integrate_pulse(sdf_data):
  x = sdf_data['Grid/Grid/X']
  y = sdf_data['Grid/Grid/Y']
  ey = sdf_data['Electric Field/Ey']
  ey2 = numpy.power(ey,2)
  y_int = np.asarray([np.trapz(ey2[a], y) for a in range(0,x.shape[0])])
  e_tot = np.trapz(y_int, x)
  return e_tot

if __name__ == '__main__':
  main()
